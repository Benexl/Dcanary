service : () -> {
  approveDeployment : (text, bool, opt text) -> ();
  configureDeploymentApproval : (
      record {
        repository_id : text;
        pipeline_id : text;
        min_approvals : nat8;
        block_on_verification_failure : bool;
        required_approvers : vec principal;
        approval_status : variant {
          Approved : record { approved_at : nat64 };
          Rejected : record { rejected_by : principal; reason : text };
          Expired : record { expired_at : nat64 };
          Pending : record { pending_approvers : vec principal };
        };
        approval_timeout_hours : nat32;
        auto_approve_on_quality_gates : bool;
      },
    ) -> ();
  create_pipeline_template : (
      text,
      record {
        stages : vec record {
          post_actions : vec text;
          retry_count : nat8;
          name : text;
          when_condition : opt text;
          steps : vec record {
            configuration : vec record { text; text };
            step_type : text;
            timeout_seconds : nat64;
          };
          parallel_group : opt text;
          timeout_minutes : nat64;
        };
        default_values : vec record { text; text };
        name : text;
        parameters : vec record {
          text;
          record {
            name : text;
            description : text;
            required : bool;
            param_type : text;
            default_value : opt text;
          };
        };
        description : text;
        required_capabilities : vec text;
        template_id : text;
      },
    ) -> (bool);
  execute_pipeline_template : (text, text, vec record { text; text }) -> (
      variant {
        Ok : record {
          status : variant { Failed; Verified; Pending };
          matching_results : nat8;
          verified_hash : opt text;
          created_at : nat64;
          error : opt text;
          executor_results : vec record {
            execution_time : opt nat64;
            hash : opt text;
            completed : bool;
            error : opt text;
            executor_id : principal;
          };
          completed_at : opt nat64;
          total_executors : nat8;
          consensus_threshold : nat8;
        };
        Err : variant {
          InvalidInput : text;
          ExecutorFailure : text;
          InstructionsNotFound : text;
          ConsensusFailure : text;
          NotFound : text;
          Unauthorized : text;
          TimeoutError : text;
          InternalError : text;
        };
      },
    );
  getPipelineVerification : (text) -> () query;
  get_active_verifications : () -> (
      vec record {
        text;
        record {
          status : variant { Failed; Verified; Pending };
          matching_results : nat8;
          verified_hash : opt text;
          created_at : nat64;
          error : opt text;
          executor_results : vec record {
            execution_time : opt nat64;
            hash : opt text;
            completed : bool;
            error : opt text;
            executor_id : principal;
          };
          completed_at : opt nat64;
          total_executors : nat8;
          consensus_threshold : nat8;
        };
      },
    ) query;
  get_canister_info : () -> (
      record {
        authorized_requester : principal;
        active_verifications : nat64;
        deployed_at : nat64;
        build_instructions_canister : principal;
        version : text;
        build_executor_canisters : vec principal;
        total_verifications : nat64;
        admin_principal : principal;
      },
    ) query;
  get_pipeline_instance_status : (text) -> (
      opt record {
        status : text;
        instance_id : text;
        current_stage : nat32;
        error : opt text;
        template_id : text;
        project_id : text;
        completed_at : opt nat64;
        started_at : nat64;
      },
    ) query;
  get_pipeline_template : (text) -> (
      opt record {
        stages : vec record {
          post_actions : vec text;
          retry_count : nat8;
          name : text;
          when_condition : opt text;
          steps : vec record {
            configuration : vec record { text; text };
            step_type : text;
            timeout_seconds : nat64;
          };
          parallel_group : opt text;
          timeout_minutes : nat64;
        };
        default_values : vec record { text; text };
        name : text;
        parameters : vec record {
          text;
          record {
            name : text;
            description : text;
            required : bool;
            param_type : text;
            default_value : opt text;
          };
        };
        description : text;
        required_capabilities : vec text;
        template_id : text;
      },
    ) query;
  get_verification_status : (text, text) -> (
      variant {
        Ok : record {
          status : variant { Failed; Verified; Pending };
          matching_results : nat8;
          verified_hash : opt text;
          created_at : nat64;
          error : opt text;
          executor_results : vec record {
            execution_time : opt nat64;
            hash : opt text;
            completed : bool;
            error : opt text;
            executor_id : principal;
          };
          completed_at : opt nat64;
          total_executors : nat8;
          consensus_threshold : nat8;
        };
        Err : variant {
          InvalidInput : text;
          ExecutorFailure : text;
          InstructionsNotFound : text;
          ConsensusFailure : text;
          NotFound : text;
          Unauthorized : text;
          TimeoutError : text;
          InternalError : text;
        };
      },
    ) query;
  listPipelineVerifications : (text) -> () query;
  list_active_pipeline_instances : () -> (vec text) query;
  list_pipeline_templates : () -> (
      vec record {
        text;
        record {
          stages : vec record {
            post_actions : vec text;
            retry_count : nat8;
            name : text;
            when_condition : opt text;
            steps : vec record {
              configuration : vec record { text; text };
              step_type : text;
              timeout_seconds : nat64;
            };
            parallel_group : opt text;
            timeout_minutes : nat64;
          };
          default_values : vec record { text; text };
          name : text;
          parameters : vec record {
            text;
            record {
              name : text;
              description : text;
              required : bool;
              param_type : text;
              default_value : opt text;
            };
          };
          description : text;
          required_capabilities : vec text;
          template_id : text;
        };
      },
    ) query;
  list_verification_history : (opt nat64, opt nat64) -> (
      vec record {
        text;
        record {
          status : variant { Failed; Verified; Pending };
          matching_results : nat8;
          verified_hash : opt text;
          created_at : nat64;
          error : opt text;
          executor_results : vec record {
            execution_time : opt nat64;
            hash : opt text;
            completed : bool;
            error : opt text;
            executor_id : principal;
          };
          completed_at : opt nat64;
          total_executors : nat8;
          consensus_threshold : nat8;
        };
      },
    ) query;
  request_verification : (text, text, opt nat64) -> (
      variant {
        Ok : record {
          status : variant { Failed; Verified; Pending };
          matching_results : nat8;
          verified_hash : opt text;
          created_at : nat64;
          error : opt text;
          executor_results : vec record {
            execution_time : opt nat64;
            hash : opt text;
            completed : bool;
            error : opt text;
            executor_id : principal;
          };
          completed_at : opt nat64;
          total_executors : nat8;
          consensus_threshold : nat8;
        };
        Err : variant {
          InvalidInput : text;
          ExecutorFailure : text;
          InstructionsNotFound : text;
          ConsensusFailure : text;
          NotFound : text;
          Unauthorized : text;
          TimeoutError : text;
          InternalError : text;
        };
      },
    );
  setQualityGates : (
      text,
      vec record {
        name : text;
        required : bool;
        gate_type : variant {
          TestCoverage : record { min_percentage : float32 };
          CodeQuality : record { max_violations : nat32 };
          PerformanceTest : record { max_response_time_ms : nat32 };
          SecurityScan : record { max_vulnerabilities : nat32 };
          CustomCheck : record { expected_output : text; check_command : text };
        };
        timeout_seconds : nat32;
      },
    ) -> ();
  update_authorized_requester : (principal) -> (bool);
  update_build_executor_canisters : (vec principal) -> (bool);
  update_build_instructions_canister : (principal) -> (bool);
  verifyPipelineExecution : (
      record {
        branch : text;
        required_consensus : nat8;
        pipeline_config : text;
        repository_id : text;
        pipeline_id : text;
        executor_results : vec record {
          stage_results : vec record {
            artifacts : vec record { text; blob };
            execution_time : nat64;
            metadata : vec record { text; text };
            cycles_consumed : nat64;
            success : bool;
            stage_name : text;
          };
          executor_id : principal;
        };
        commit_hash : text;
      },
    ) -> ();
}